<apex:page docType="html-5.0" controller="JBCXM.RelationshipBroker"  extensions="JBCXM.NSRemoting,JBCXM.GSCommonBroker" sidebar="false" title="Relationship 360" tabStyle="CustomerSuccess360__tab">
    <style id="gs-app-temp-style-for-flash" type="text/css">
        object{
            opacity: 0
        }
    </style>
    <script type="text/javascript">
        window.addEventListener('load', function(){
            var styleNode = document.querySelector('#gs-app-temp-style-for-flash');
            styleNode.remove ? styleNode.remove() : styleNode.parentElement.removeChild(styleNode);
        });
        window.GSPerformance = {};
        window.GSPerformance.mark = window.GSPerformance.measure = function(){};
    </script>

   <apex:includeScript value="/support/console/43.0/integration.js"/> 
   <script src="/soap/ajax/31.0/connection.js" type="text/javascript"></script>
    <script src="/soap/ajax/31.0/apex.js" type="text/javascript"></script>
    <script src="https://www.google.com/jsapi" type ="text/javascript" async = "1"/>
    <script src="{!JSINHTMLENCODE(GainsightCDNServerDomain)}gs-ui-static/{!JSINHTMLENCODE(GainsightAppVersion)}/GSVendor/js/vendor/HTMLSanitizer.js"></script>
    <script>
        var defaultImage = "{!(URLFOR($Resource.GSAppCSS))}";
         defaultImage = defaultImage +"/images/sponsor-images/empty-img.png" ;
        var nsParams               = fakeEval('{!JSINHTMLENCODE(nsParams)}');var hc = eval({!(headerConfig)});
        var apiEndPoint = hc.gatewayURL;
        var host = "SALESFORCE";
        var GS                      = GS || {};
        GS.antConfig                = fakeEval('{!JSINHTMLENCODE(ANTConfig)}');
        GS.sessionId                = "{!$Api.Session_ID}";
        GS.colorConfig = {!(colorConfig)}; 
        GS.NSSessionId           = "{!(NSSessionId)}";
        GS.nsURL                    = nsParams.url;
        GS.pptURL             = nsParams.url;
        GS.apiSessionId             = "{!($Api.Session_ID)}";
        GS.activityServiceUrl       = nsParams.url + '/ant';
        GS.isNSEnabled              = (nsParams.nsenabled == "true" || nsParams.nsenabled == true);
        GS.remotingEndPoint         = '{!$RemoteAction.RelationshipBroker.relationship360Broker}';
        GS.remoting                 = "{!$RemoteAction.NSRemoting.apinsinvoke}";
        GS.restClientConfig           = {sessionId: GS.sessionId , remoting : "{!$RemoteAction.NSRemoting.apinsinvoke}"};
        GS.remotingBulkEndPoint     = '{!$RemoteAction.RelationshipBroker.relationshipBulkRequestBroker}';
        GS.commonRemotingEndPoint  = '{!$RemoteAction.GSCommonBroker.gsCommonRequestBroker}';  
        GS.packageNS            = "{!(pkgNS)}";
        GS.Partner_Server_URL_V12 = "{!($Api.Partner_Server_URL_120)}";
      GS.isPackagedInstance   = (GS.packageNS) ? "true" : "false";
        GS.userConfig = {
            userLocale          : {!(dateTimeFormatByLocale)},
            userName            : "{!(JSINHTMLENCODE($User.FirstName))}"+" "+"{!(JSINHTMLENCODE($User.LastName))}",
            userId              : "{!$User.Id}",
            emailId             : "{!$User.Email}",
            profilePhoto        : "{!(profilePhoto)}",
            userDisplayName     : "{!(JSINHTMLENCODE(userDisplayName))}",
            gainsightTabs       : fakeEval('{!JSINHTMLENCODE(gainsightTabs)}'),
            isLightningEnabled  : {!(isLightningEnabled)}
        };      
        GS.currencyConfig       = fakeEval('{!JSINHTMLENCODE(currencyConfigJSON)}');
        GS.customLookUpConfig   = JSON.parse("{!(JSENCODE(customLookUpConfigMap))}");
        
        var mode                = '{!JSINHTMLENCODE($CurrentPage.parameters.mode)}';
        GS.frameworkPath        = "{!JSINHTMLENCODE(GainsightCDNServerDomain)}gs-ui-static/{!JSINHTMLENCODE(GainsightAppVersion)}/GSApp/js/Gainsight";
        GS.vendorPath           = "{!JSINHTMLENCODE(GainsightCDNServerDomain)}gs-ui-static/{!JSINHTMLENCODE(GainsightAppVersion)}/GSVendor/js/vendor";
        GS.textVendorPath       = "{!JSINHTMLENCODE(GainsightCDNServerDomain)}gs-ui-static/{!JSINHTMLENCODE(GainsightAppVersion)}/GSVendor/js/vendor/text";
        GS.relScorecardEnabled  = {!(relScorecardEnabled)};
        GS.customJSPath         = "{!JSENCODE(URLFOR($Resource.CustomJS, ''))}";
        GS.nsPath               = "{!JSENCODE(URLFOR($Resource.NS, ''))}";
        GS.highcharts           = "{!JSENCODE(URLFOR($Resource.HighchartsJS, ''))}";        
        GS.jqGrid               = "{!JSENCODE(URLFOR($Resource.jqGrid,''))}";       
        GS.jQuery               = "{!JSENCODE(URLFOR($Resource.JQuery,''))}"
        GS.maxAjaxTimeout       = 120000; //Used for timeout in case of ajax remoting request
        GS.relationshipId       = "{!(JSINHTMLENCODE($CurrentPage.parameters.rId))}";
        GS.accountId            = "{!(JSINHTMLENCODE($CurrentPage.parameters.accId))}";
        GS.rTypeId              = "{!(JSINHTMLENCODE($CurrentPage.parameters.rTypeId))}";
        GS.isRelationship360  = true;
        GS.sfDate = "{!(sfDate)}";
        GS.userBlankPhoto = "{!JSINHTMLENCODE(GainsightCDNServerDomain)}gs-ui-static/{!JSINHTMLENCODE(GainsightAppVersion)}/GSAppCSS/images/workflow/No-User.jpg";
        GS.sfdcBaseURL          = "{!(sfdcBaseURL)}";
        GS.customLabels         = fakeEval('{!JSINHTMLENCODE(customLabelsMap)}');
        var currencyConfigObject = fakeEval('{!JSINHTMLENCODE(currencyConfigJSON)}');
        GS.isDAMigrationInProcess = {!(IsDAMigrationInProcess)};
        GS.honourTimezonePreferences = true; // Only in few pages needs to honor, timezone needs to honored for sfdc data
        GS.displayTimezone = true; // Display Timezone on UI
	    GS.enableExport = true;
        if(!window.Visualforce) {
           var redirectURL = window.location.href;
           var numOfReloads = "{!JSINHTMLENCODE($CurrentPage.parameters.numOfReloads)}";
            numOfReloads = parseInt(numOfReloads || 0);
            if(numOfReloads <= 1) {
               var joinerChar = (redirectURL.indexOf("?") > 0) ? "&" : "?"
               numOfReloads = numOfReloads+1;
               window.location.href = redirectURL+joinerChar+"numOfReloads="+numOfReloads+"";
            }
        }
         var GSGA = {
            orgId   : "{!$Organization.Id}",
            orgName : "{!(JSINHTMLENCODE($Organization.Name))}",
            userName: "{!(JSINHTMLENCODE($User.FirstName))}"+" "+"{!(JSINHTMLENCODE($User.LastName))}"
        };
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    </script>     
    
     <apex:outputpanel rendered="{!If(JSINHTMLENCODE($CurrentPage.parameters.env) == null , true, false)}">
        <c:AlertForm />
        <script>
            installResources({
                staticScripts: ["angular8/scripts.js" ],
                scripts: ["r360/scripts/r360.bundle.js"],
                styles:["r360/styles/r360.css"]
             });
        </script>
    </apex:outputpanel>
    


    <apex:outputpanel rendered="{!If(JSINHTMLENCODE($CurrentPage.parameters.env) == "dev" , true, false)}">
        <c:AlertForm />
        <script type="text/javascript">
            prepareCdnProps();
        </script>
    	<apex:stylesheet value="{!IF(JSINHTMLENCODE($CurrentPage.parameters.apppath)!=null,JSINHTMLENCODE($CurrentPage.parameters.apppath),'https://localhost:8090/UI')}/r360/styles/r360.css" />
        <script type="text/javascript" src="{!IF(JSINHTMLENCODE($CurrentPage.parameters.apppath)!=null,JSINHTMLENCODE($CurrentPage.parameters.apppath), "https://localhost:8090/UI")}/r360/scripts/r360.bundle.js"></script>
    </apex:outputpanel>

    <div id="gs-app-container">
      <div class="gs-module-container">
        <div class="gs-relationship-cnt"></div>
      </div>
    </div>
    
    <apex:form ></apex:form>

    
    <script src="{!JSINHTMLENCODE(GainsightCDNServerDomain)}gs-ui-static/{!JSINHTMLENCODE(GainsightAppVersion)}/CustomJS/CustomJS/analyticsWrapper.js"></script>
    <script>
        gainsightTrackEvents.pushPageViews('Relationship 360');
        
        function OnChatterRendered(){
                
                stopDOMObserver();
                j$(".gs-chatter-loader-img").hide();
               j$(".chatterMainDivClass").show();

               var config = { attributes: false, subtree: true, childList: true, characterData: false };
                getCommentEditorObserver().observe(document.getElementById('chatterDivId'), config);
                
               //Topic is added only when the feed is not on cta object
                if(GS.topic && GS.topic.length >0 ){
                     j$("#publishereditablearea").val(GS.topic + ": ");
                  j$("#publishersharebutton").on("click", onClickShareButton);
                     j$(".publisherFeedItemTypeChoice a").on("click", addTopic);
                  j$("#publishereditablearea").mousedown(addTopic);
                }
               j$(".cxcontentcommentaction").on("click", onClickAttachFile);

               AutoCompleteInputElement.prototype.positionACBox = function(a) {
               if(this.element && this.acBox && (!a || this.isACBoxVisible())) {
                  pos =j$(':focus').offset();
                  this.acBox.setStyle("left", pos.left + "px");
                  this.acBox.setStyle("top", pos.top+20 + "px");
                  this.acBox.setStyle("width", "auto");
                  "object" === typeof Ext && (a = Ext.get("massEdit"), null !== a && this.acBox.setStyle("zIndex", parseFloat(a.getStyle("z-index"), 10) + 10))
               }
            };
            }
            function getCommentEditorObserver() {
                if(!document._observer){
                    document._observer = new MutationObserver(function(mutations) {
                       for (var mutationIdx=0; mutationIdx < mutations.length; mutationIdx++) {
                           var mutation = mutations[mutationIdx];
                           for (var childIndex=0; childIndex < mutation.addedNodes.length; childIndex++) {
                               var child = mutation.addedNodes[childIndex];
                               if (child.nodeType != 3 && child.classList.contains('cxfeeditem')) {
                                  
                                  var ele = child.getElementsByClassName("cxcontentcommentaction");
                                  if(ele && ele.length >0 )
                                    ele[0].addEventListener('click', onClickAttachFile);
                           
                               }
                           }
                       }
                    });
                    document.defaultView.addEventListener('unload', function(evt){
                        if(document._observer){
                            document._observer.disconnect();
                            delete document._observer;
                        }
                    });
                  
                }
                return document._observer;
            }
            function stopDOMObserver(){
            
               if(document._observer){
                     document._observer.disconnect();
                     delete document._observer;
                }
  
            }
             function addTopic() {
  
                   var iFrameChecker = setInterval(function() {
                       
                        if(j$(".cke_wysiwyg_frame").length) {
                            var chatterIFrameBody = j$(".cke_wysiwyg_frame").contents().find("body");
                            if(chatterIFrameBody.length){
                          
                        setTimeout(function(){
                               
                                       j$(".cke_wysiwyg_frame").contents().find("body").text(GS.topic + ": ").removeClass("placeholder").focus();
                             
                              }, 200);
                            
                              clearInterval(iFrameChecker);
                            }
                        }
                    },200);
            }
            function onClickShareButton(){
                
                window.setTimeout(function(){
                        j$("#publishereditablearea").val(GS.topic + ": ");
                }, 1500);
            }
            function onClickAttachFile(){

                    var self = this;
                    setTimeout(function(){
                      j$("#contentCommentDropdown").position({
                        at:"left bottom",
                        of:j$(self),
                        my:"left top"
                      });
                      
                    },150);

            }
        
    </script>
    
    <apex:form >
      <apex:actionFunction name="actionCTAIdforChatter"
         action="{!getCTAIdForChatter}"
         reRender="chatterIdCTA, rerenderCTAChatterPanel"
         oncomplete="OnChatterRendered()">
         <apex:param name="paramCTAId" value="" />
      </apex:actionFunction>
   </apex:form>
   <div class="gs-chatter-loader-img" style="display: none;">
      <div class="gs-chatter-loader"></div>
      <span>Loading Chatter</span>
   </div>
   <div class="chatterMainDivClass" style="display: none;">
      <apex:outputPanel id="rerenderCTAChatterPanel">
         <apex:outputPanel id="renderCTAChatterPanel">
            <div id="chatterDivId">
               <chatter:feed entityId="{!ctaChatterId}" id="chatterIdCTA" />
            </div>
         </apex:outputPanel>
      </apex:outputPanel>
   </div>
        
</apex:page>